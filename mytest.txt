////  SleepGraphViewController.m//  watashimove////  Created by Dai Hamada on 9/30/13.//  Copyright (c) 2013 teamLab. All rights reserved.//#import "SleepGraphViewController.h"#import "WMAPIGetSleepDesignConnector.h"#import "SleepGraphDataConnector.h"#import "WMUserDefaults.h"#import "GraphRecentDataView.h"#import "SleepFeedCreateViewController.h"#import "AuthAPIGetMachineConnector.h"#import "SleepNoGadgetView.h"#import "NHCAPIGetMeasureNewdataConnector.h"#import <NSDate+Escort.h>//#import <ShinobiCharts/ShinobiCharts.h>#import "SleepCollectionCellCollectionViewCell.h"////高速化のため取得日をその日から1年間にする改修2015/04/16//#define SLEEP_GRAPH_START_TIME [NSDate dateWithTimeIntervalSinceNow:-31556926]// SLEEP_GRAPH_START = 2010/11/1#define SLEEP_GRAPH_START_TIME wmGraphStartTime//#define SLEEP_GRAPH_START_TIME 1401548400@implementation GraphLineView- (void)drawRect:(CGRect)rect{    [super drawRect:rect];        CGContextRef context = UIGraphicsGetCurrentContext();    CGContextSetStrokeColorWithColor(context, [[UIColor lightGrayColor] CGColor]);    int lines[7] = {3,6,9,12,15,18,21};    CGFloat height = self.frame.size.height;    for(int i=0;i<7;i++){        CGContextMoveToPoint(context, 0.0f, height*lines[i]/24);        CGContextAddLineToPoint(context, self.frame.size.width, height*lines[i]/24);        CGContextDrawPath(context, kCGPathStroke);    }}@end@interface SleepGraphCollectionWrapper : UIView@property (nonatomic, assign) IBOutlet UICollectionView *collectionView;@property (nonatomic, assign) IBOutlet UICollectionView *monthCollectionView;@property (nonatomic, assign) IBOutlet GraphLineView *graphLineView;@property (nonatomic, assign) IBOutlet UIView *graphLabelView;@end@implementation SleepGraphCollectionWrapper@synthesize collectionView;@end@interface SleepDatum : NSObject@property (nonatomic, retain) NSDate *startTime;@property (nonatomic, retain) NSDate *endTime;+ (SleepDatum *) sleepDatumFrom:(NSDate *)startTime to:(NSDate *)endTime;@end@implementation SleepDatum@synthesize startTime, endTime;+ (SleepDatum *) sleepDatumFrom:(NSDate *)startTime to:(NSDate *)endTime{    SleepDatum *d = [[SleepDatum alloc] init];    d.startTime = startTime; d.endTime = endTime;    return d;}@end@interface SleepDayDatum : NSObject@property (nonatomic, retain) NSDate *day;@property (nonatomic, retain) NSMutableArray *sleeps;@end@implementation SleepDayDatum@synthesize day, sleeps;@end@interface NSDate (SleepGraph)- (NSDate *) sleepBaseDate;- (int) indexForSleepArray;- (NSDate *) nextSleepSplitDate;@end@implementation NSDate (SleepGraph)- (NSDate *) sleepBaseDate{    if([self hour] < 12) return [[self dateAtStartOfDay] dateByAddingDays:-1];    else return [[self dateAtStartOfDay] dateByAddingDays:0];}- (int) indexForSleepArray{    //高速化のため取得日をその日から1年間にする改修2015/04/16    int r = ([[self sleepBaseDate] timeIntervalSinceNow] - 31556926) / (24*60*60);    return r;    //    int r = ([[self sleepBaseDate] timeIntervalSince1970] - SLEEP_GRAPH_START_TIME) / (24*60*60);//    return r;}- (NSDate *) nextSleepSplitDate{    if([self hour] < 12) return [[self dateAtStartOfDay] dateByAddingHours:12];    else return [[self dateAtStartOfDay] dateByAddingHours:12+24];}@end@interface SleepGraphViewController()@property(nonatomic, strong) NSArray *originalData;@property(nonatomic, strong) NSArray *mySleepData;@property(nonatomic, strong) NSArray *otherSleepData;@property(nonatomic, strong) NSDictionary *recentData;@property(nonatomic) NSDate *dummyDate;@property (nonatomic, assign) UICollectionView *collectionView;@property (nonatomic, assign) UICollectionView *monthCollectionView;- (NSAttributedString *) buildDayWeekText:(NSDate *)date;@end@implementation SleepGraphViewController{    NSDateFormatter* _debugFmt ;}- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil{    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];    if (self) {        // Custom initialization        _debugFmt = [[NSDateFormatter alloc] init];        _debugFmt.dateStyle = NSDateFormatterShortStyle;        _debugFmt.timeStyle = NSDateFormatterShortStyle;        _debugFmt.locale = [NSLocale currentLocale];        self.mySleepData = nil;    }    return self;}- (void)viewDidLoad{    [super viewDidLoad];    [self makeHeaderWithTitle:wmTitleFeedGraphSleep];    [self showBackButton:YES];    // データの取得元がWellnessLinkの場合はデータ追加が可能    if ([WMUserDefaults sleepDataSource] == ENGraphDataSourceWellnessLink) {        [self showAddButton:YES];    }        [self.recentDataView updatePictogramWithGraphType:ENGraphTypeSleep];    self.recentDataView.graphView.userInteractionEnabled = YES;    [self.recentDataView.graphView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(moveToSleepGraphSetting)]];            // グラフビュー    self.graphView.hidden = YES;    self.graphView.datasource = self;        [self.recentDataView updateWithNullValue];    // スクロールのサイズを設定    //[self.scrollView setContentSize:CGSizeMake(self.view.width, self.graphView.bottom + 8.0f)];}- (UIView *) getMainContentView{    // init main content    UINib *nib = [UINib nibWithNibName:@"SleepCollectionView" bundle:[NSBundle mainBundle]];        CGFloat scrollHeight = self.scrollView.frame.size.height;    CGFloat graphHeight = self.scrollView.frame.size.height-[self contentHeight] - 68;        SleepGraphCollectionWrapper *wrapper = [[nib instantiateWithOwner:self options:nil] objectAtIndex:0];    CGRect wrapperRect = wrapper.frame;    wrapperRect.size.height = graphHeight;    wrapper.frame = wrapperRect;        UICollectionView *collectionView = wrapper.collectionView;    self.collectionView = collectionView;    collectionView.dataSource = self;    collectionView.delegate = self;    [self.view addSubview:wrapper];    [collectionView registerNib:[UINib nibWithNibName:@"SleepCollectionCellEven" bundle:nil] forCellWithReuseIdentifier:@"SleepCollectionCellEven"];    [collectionView registerNib:[UINib nibWithNibName:@"SleepCollectionCellOdd" bundle:nil] forCellWithReuseIdentifier:@"SleepCollectionCellOdd"];        // month view    collectionView = wrapper.monthCollectionView;    [collectionView registerNib:[UINib nibWithNibName:@"SleepCollectionCellMonthEven" bundle:nil] forCellWithReuseIdentifier:@"SleepCollectionCellMonthEven"];    [collectionView registerNib:[UINib nibWithNibName:@"SleepCollectionCellMonthOdd" bundle:nil] forCellWithReuseIdentifier:@"SleepCollectionCellMonthOdd"];    self.monthCollectionView = collectionView;    collectionView.dataSource = self;    collectionView.delegate = self;        CGRect collectionRect = self.collectionView.frame;    collectionRect.size.height = graphHeight;    self.collectionView.frame = collectionRect;    self.monthCollectionView.frame = collectionRect;    ((UICollectionViewFlowLayout *)self.collectionView.collectionViewLayout).itemSize = CGSizeMake(40, graphHeight);    ((UICollectionViewFlowLayout *)self.monthCollectionView.collectionViewLayout).itemSize = CGSizeMake(10, graphHeight);        // setup graph label    int lines[7] = {3,6,9,12,15,18,21};    CGFloat height = wrapper.graphLabelView.size.height;    for(UIView *label in wrapper.graphLabelView.subviews){        CGFloat pos = height*lines[label.tag]/24;        CGRect rect = label.frame;        rect.origin.y = pos - (rect.size.height/2);        label.frame = rect;    }        return wrapper;}- (void)viewWillAppear:(BOOL)animated{    [super viewWillAppear:animated];    [self.recentDataView updateWithNullValue];    self.mySleepData = nil;        [self.recentDataView enableGraphSettingWithGraphType:ENGraphTypeSleep];    SleepGraphViewController *_self = self;    [[self updateByDate:[NSDate date]] then:^(id resultObject) {        if ([resultObject isEqualToString:@"finished"]) {            // 最新データを保持            _self.recentData = nil;            [_self buildRecentData];            if(self.dateSelectView.isDisplayMonth){                self.monthCollectionView.hidden = NO;                self.collectionView.hidden = YES;                [self.collectionView reloadData];            }else{                self.monthCollectionView.hidden = YES;                self.collectionView.hidden = NO;                [self.monthCollectionView reloadData];            }        }    }];}- (void)viewWillLayoutSubviews {    [super viewWillLayoutSubviews];    self.scrollView.autoresizesSubviews = NO;    self.scrollView.height = self.view.height;}/** * データ追加ボタンが押されたら編集画面に遷移 */- (void) addButtonTapped{    [self moveToSleepFeedCreate];}/** * 直近データを整備 */- (void) buildRecentData {    if (self.range==ENGraphSpanModeWeek) {        [self.recentDataView updateWithNullValue];        NSDate* current = [self currentDay];        NSTimeInterval currentNext = [[current dateByAddingHours:12] timeIntervalSinceReferenceDate] ;        NSArray* recents = [self.originalData filteredArrayUsingPredicate:[NSPredicate predicateWithBlock:                             ^BOOL(NSDictionary* sleep, NSDictionary *bindings) {                                                                  return [sleep[@"endDate"] timeIntervalSinceReferenceDate] <= currentNext;                             }]];        self.recentData = [recents lastObject];        [self updateRecentData];    } else {        [self.recentDataView updateWithClear];    }}/** * 直近データを上部に表示させる */- (void) updateRecentData {    if (self.recentData) {        [self.recentDataView updateWithClear];        NSDate *startDate = self.recentData[@"startDate"];        NSDate* endDate = self.recentData[@"endDate"];        NSInteger sleepMinutes = ABS([startDate timeIntervalSinceDate:endDate]) / 60 /5;        sleepMinutes *= 5;        [self.recentDataView updatePictogramWithGraphType:ENGraphTypeSleep];        [self.recentDataView updateValue:[NSString stringWithFormat:@"%d時間%02d分", sleepMinutes / 60, sleepMinutes % 60]];//        [self.recentDataView updateDate:endDate];    } else {        [self.recentDataView updateWithNullValueOnly];    }}#pragma -#pragma mark GraphRangeSelectorViewDelegate//-(void)setSelectedDate:(NSDate *)selectedDate isTop:(BOOL)isTop {//    [self sendTapEventTrackingWithLabel:kGALabelDateSelect value:nil];//    //    long selectedTime = [selectedDate timeIntervalSince1970];//    if (selectedTime >= wmGraphStartTime) {//        self.current = [selectedDate daysAfterDate:EPOCH];//    } else {//        self.current = [selectedDate daysAfterDate:EPOCH];//    }//    self.current = self.calendar;//    [self updateByDate:selectedDate];//}/** * 指定された日付でデータを取ってきて、グラフを更新 */- (STDeferred *) updateByDate:(NSDate *)fromDate toDate:(NSDate *)toDate{    return [self updateByDate:self.currentDay];}/** * 指定された日付でデータを取ってきて、グラフを更新 */- (STDeferred *) updateByDate:(NSDate *)date{    if(self.mySleepData){        STDeferred *deff = [STDeferred deferred];        [deff resolve:@"finished"];        int row =[[self.currentDay dateByAddingDays:1] indexForSleepArray];        if(row<0)row=0; if(row>=self.mySleepData.count) row = self.mySleepData.count-1;        NSIndexPath *path = [NSIndexPath indexPathForItem:row inSection:0];        if(self.dateSelectView.isDisplayMonth){            [self.monthCollectionView scrollToItemAtIndexPath:path atScrollPosition:UICollectionViewScrollPositionRight animated:YES];            self.monthCollectionView.contentOffset = CGPointMake(self.monthCollectionView.contentOffset.x+10,0);            [self updateVisibleCell];        }else{            [self.collectionView scrollToItemAtIndexPath:path atScrollPosition:UICollectionViewScrollPositionRight animated:YES];            self.collectionView.contentOffset = CGPointMake(self.collectionView.contentOffset.x+40,0);            [self updateVisibleCell];        }        dispatch_async(dispatch_get_main_queue(), ^{            [self updateVisibleCell];        });        return deff;    }    [self startIndicator];    STDeferred *deferred = [STDeferred deferred];        //高速化のため取得日をその日から1年間にする改修2015/04/16    //   1年前(-31556926秒)とする        NSDate *fromDate = [NSDate dateWithTimeIntervalSinceNow:-31556926];    //    NSDate *fromDate = [NSDate dateWithTimeIntervalSince1970:wmGraphStartTime];    //高速化のため取得日をその日から1年間にする改修2015/04/16ここまで            NSDate *toDate = [NSDate date];    SleepGraphViewController *_self = self;    [[[SleepGraphDataConnector fetchMyData:fromDate toDate:[toDate dateByAddingDays:1] willRetry:NO] then:^(id response){                // からのmySleepDataを作成        long startTime = SLEEP_GRAPH_START_TIME;        long endTIme = [[NSDate date] timeIntervalSince1970] + 24*60*60;        int count = (endTIme - startTime +1) / (24*60*60);        NSMutableArray *sleepData = [NSMutableArray arrayWithCapacity:count];        for(long t=SLEEP_GRAPH_START_TIME; t<endTIme; t+=24*60*60){            NSDate *date = [NSDate dateWithTimeIntervalSince1970:t];            if([date indexForSleepArray]>=0){                SleepDayDatum *datum = [[SleepDayDatum alloc] init];                datum.day = date;                datum.sleeps = [NSMutableArray array];                [sleepData addObject:datum];            }        }        _self.mySleepData = sleepData;                NSMutableArray *originalData = [NSMutableArray array];        self.originalData = originalData;        for (NSDictionary *g in response) {            [originalData addObject:g];            //NSMutableDictionary *tempDic = [@{} mutableCopy];            NSDate *startTime = (NSDate*)g[@"startDate"];            NSDate *endTime = (NSDate*)g[@"endDate"];            while([[startTime nextSleepSplitDate] timeIntervalSince1970] < [endTime timeIntervalSince1970]){                // split                NSDate *newEndTime = [startTime nextSleepSplitDate];                SleepDayDatum *datum = [self.mySleepData objectAtIndex:[startTime indexForSleepArray]];                [datum.sleeps addObject:[SleepDatum sleepDatumFrom:startTime to:newEndTime]];                startTime = newEndTime;            }            SleepDayDatum *datum = [self.mySleepData objectAtIndex:[startTime indexForSleepArray]];            [datum.sleeps addObject:[SleepDatum sleepDatumFrom:startTime to:endTime]];        }        //_self.mySleepData = mySleepList;        if (_self.mySleepData) {            // 自分のデータ取得のみ成功した場合は、自分のデータのみ表示させる            _self.otherSleepData = @[];            int row = [self collectionView:self.monthCollectionView numberOfItemsInSection:0]-2;            if(row<0) row = 0;            NSIndexPath *path = [NSIndexPath indexPathForItem:row inSection:0];            self.dateSelectView.selectedDate = [NSDate date];            [self.monthCollectionView reloadData];            [self.collectionView reloadData];            if(self.dateSelectView.isDisplayMonth){                self.monthCollectionView.hidden = NO;                self.collectionView.hidden = YES;                [self.monthCollectionView scrollToItemAtIndexPath:path atScrollPosition:UICollectionViewScrollPositionRight animated:NO];                self.monthCollectionView.contentOffset = CGPointMake(self.monthCollectionView.contentOffset.x+10,0);                [self updateVisibleCell];            }else{                self.monthCollectionView.hidden = YES;                self.collectionView.hidden = NO;                [self.collectionView scrollToItemAtIndexPath:path atScrollPosition:UICollectionViewScrollPositionRight animated:NO];                self.collectionView.contentOffset = CGPointMake(self.collectionView.contentOffset.x+40,0);                [self updateVisibleCell];            }            dispatch_async(dispatch_get_main_queue(), ^{                [self updateVisibleCell];            });        }        [_self stopIndicator];        [deferred resolve:@"finished"];    }] fail:^(NSError *error){        _self.mySleepData = @[];        _self.otherSleepData = @[];        if(self.dateSelectView.isDisplayMonth){            self.monthCollectionView.hidden = NO;            self.collectionView.hidden = YES;            [self.monthCollectionView reloadData];        }else{            self.monthCollectionView.hidden = YES;            self.collectionView.hidden = NO;            [self.collectionView reloadData];        }        [_self stopIndicator];        [deferred resolve:@"error"];    }];    return deferred;}/** * 睡眠データを作成 */- (NSArray *) buildSleepData:(NSArray *)arr {    return @[];}/** * 現在選択中の日付でテーブルをリロードする */- (void) updateWithCurrentDate{    [self updateByDate:self.currentDay];}/** * 睡眠のグラフ表示設定画面へ */- (void) moveToSleepGraphSetting{    GraphDataSourceSettingViewController *viewController = [[GraphDataSourceSettingViewController alloc] initWithNibName:nil bundle:nil];    viewController.delegate = self;    [viewController setGraphIndex:1];    [viewController setDataSource:[WMUserDefaults sleepDataSource]];        [self.navigationController pushViewController:viewController animated:YES];}#pragma mark - GraphDataSourceSettingViewControllerDelegate- (void) updateDataSource:(ENGraphDataSource)dataSource graphIndex:(NSUInteger)graphIndex {    if (graphIndex == 0) {        // 活動量グラフ表示の更新の場合は次にダッシュボードをリロードする        if ([WMUserDefaults activityDataSource] != dataSource) {            [WMUserDefaults saveNeedReloadDashboard:YES];        }        [WMUserDefaults saveActivityDataSource:dataSource];            } else if (graphIndex == 1) {        [WMUserDefaults saveSleepDataSource:dataSource];    }}- (void) changeDate:(NSInteger) day isMonthView:(BOOL)isMonthView{    [super changeDate:day isMonthView:isMonthView];    if(self.dateSelectView.isDisplayMonth){        self.monthCollectionView.hidden = NO;        self.collectionView.hidden = YES;        [self.monthCollectionView reloadData];        int row = [self.currentDay indexForSleepArray];        if(row<0)row=0; if(row>=self.mySleepData.count) row = self.mySleepData.count-1;        NSIndexPath *path = [NSIndexPath indexPathForItem:row inSection:0];        [self.monthCollectionView scrollToItemAtIndexPath:path atScrollPosition:UICollectionViewScrollPositionRight animated:NO];        self.monthCollectionView.contentOffset = CGPointMake(self.monthCollectionView.contentOffset.x,0);        //[self updateVisibleCell];    }else{        self.monthCollectionView.hidden = YES;        self.collectionView.hidden = NO;        [self.collectionView reloadData];        int row = [self.currentDay indexForSleepArray];        if(row<0)row=0; if(row>=self.mySleepData.count) row = self.mySleepData.count-1;        NSIndexPath *path = [NSIndexPath indexPathForItem:row inSection:0];        [self.collectionView scrollToItemAtIndexPath:path atScrollPosition:UICollectionViewScrollPositionRight animated:NO];        self.collectionView.contentOffset = CGPointMake(self.collectionView.contentOffset.x,0);        //[self updateVisibleCell];    }    self.current = day;    [self buildRecentData];    self.dateSelectView.selectedDate = self.currentDay;    dispatch_async(dispatch_get_main_queue(), ^{        [self updateVisibleCell];    });}#pragma mark UICollectionViewDataSource- (NSInteger) numberOfSectionsInCollectionView:(UICollectionView *)collectionView{    DEBUG_NSLog(@"monthCollectionView: %@",NSStringFromCGRect( self.monthCollectionView.frame));    DEBUG_NSLog(@"CollectionView     : %@",NSStringFromCGRect( self.collectionView.frame));    DEBUG_NSLog(@"wrapper            : %@",NSStringFromCGRect( self.collectionView.superview.frame));    return 1;// tokei1978}- (NSInteger) collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section{    //return 100;    return [self.mySleepData count];}- (UICollectionViewCell *) collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{    int row = indexPath.row;        SleepCollectionCellCollectionViewCell *cell;    if(self.monthCollectionView == collectionView){        if(row % 2 ==0){            cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"SleepCollectionCellMonthEven" forIndexPath:indexPath];        }else{            cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"SleepCollectionCellMonthOdd" forIndexPath:indexPath];        }    }else{        if(row % 2 ==0){            cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"SleepCollectionCellEven" forIndexPath:indexPath];        }else{            cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"SleepCollectionCellOdd" forIndexPath:indexPath];        }    }    if(cell){        CGRect cellRect = cell.frame;        cellRect.origin.y = 0;        cellRect.size = ((UICollectionViewFlowLayout *)collectionView.collectionViewLayout).itemSize;        //cell.frame = cellRect;        cell.graphArea.backgroundColor = [UIColor clearColor];        // set lable        SleepDayDatum *data = self.mySleepData[row];        NSDate *startDate = [data.day dateByAddingDays:-1];        NSDate *endDate = [data.day dateByAddingDays:0];        if(self.dateSelectView.isDisplayMonth){            if([startDate weekday]==2){                cell.startDayLabel.hidden = NO;                cell.endDayLabel.hidden = NO;            }else{                cell.startDayLabel.hidden = NO;                cell.endDayLabel.hidden = YES;            }            cell.endDayLabel.text = [[[self buildDayWeekText:startDate] string] substringFromIndex:0];        }else{            cell.startDayLabel.text = [[[self buildDayWeekText:startDate] string] substringFromIndex:0];            cell.endDayLabel.text = [[[self buildDayWeekText:endDate] string] substringFromIndex:0];            cell.startDayLabel.hidden = NO;            cell.endDayLabel.hidden = NO;        }        CGFloat heightDiff = (250-227);        CGRect graphAreaFrame = cell.graphArea.frame;        graphAreaFrame.size.height = cellRect.size.height - heightDiff;        DEBUG_NSLog(@"cellRect  : %@",NSStringFromCGRect(cellRect));        DEBUG_NSLog(@"graphArea : %@",NSStringFromCGRect(graphAreaFrame));        // set position/size        // iOS7対応のための処理        if ([[[UIDevice currentDevice] systemVersion] floatValue] < 8.0)        {            cell.frame = cellRect;        }        // clear first        for(UIView *gView in [cell.graphArea subviews]){            [gView removeFromSuperview];        }        // draw graph        for(int i=0; i<[data.sleeps count]; i++){            SleepDatum *d = [data.sleeps objectAtIndex:i];            NSDate *top = [[d.startTime nextSleepSplitDate] dateBySubtractingDays:1];            CGSize s = graphAreaFrame.size;            CGFloat topPos = s.height * [d.startTime timeIntervalSinceDate:top] / (24*60*60);            CGFloat bottomPos = s.height * [d.endTime timeIntervalSinceDate:top] / (24*60*60);            CGRect rect;            if(self.dateSelectView.isDisplayMonth){                rect = CGRectMake(1, topPos, 8, (bottomPos-topPos));            }else{                rect = CGRectMake(5, topPos, 30, (bottomPos-topPos));            }            UIView *v = [[UIView alloc] initWithFrame:rect];            v.backgroundColor = wmColorGraphLineSelect;            [cell.graphArea addSubview:v];        }    }    return cell;}- (NSAttributedString *) buildDayWeekText:(NSDate *)date;{    UIColor *color = ^{        switch (date.mondayStartWeekday) {            case wmWeekdaySaturday:                return wmColorMealSaturday;                            case wmWeekdaySunday:                return wmColorMealSunday;                            default:                return wmColorStringBlack;        }    }();    NSAttributedString *prefixWeekString = [[NSAttributedString alloc] initWithString:[NSString stringWithFormat:@"%d(", date.day] attributes:@{}];    NSAttributedString *weekString = [[NSAttributedString alloc] initWithString:date.weekdayString attributes:@{ NSForegroundColorAttributeName: color }];    NSAttributedString *suffixWeekString = [[NSAttributedString alloc] initWithString:@")" attributes:@{}];        NSMutableAttributedString *dayWeekString = [[NSMutableAttributedString alloc] init];    [dayWeekString appendAttributedString:prefixWeekString];    [dayWeekString appendAttributedString:weekString];    [dayWeekString appendAttributedString:suffixWeekString];    return dayWeekString;}#pragma mark UIScrollViewDelegate- (void) updateVisibleCell{    UICollectionView *collection = nil;    if(self.dateSelectView.isDisplayMonth){        collection = self.monthCollectionView;    }else{        collection = self.collectionView;    }    NSArray* visibleCellIndex = collection.indexPathsForVisibleItems;        NSIndexPath *maxPath = nil;    for(NSIndexPath *path in visibleCellIndex){        if(path.item>maxPath.item){            SleepCollectionCellCollectionViewCell *cell = (SleepCollectionCellCollectionViewCell*)[collection cellForItemAtIndexPath:path];            if(cell.center.x < collection.contentOffset.x + collection.frame.size.width){                maxPath = path;}        }    }    for(NSIndexPath *path in visibleCellIndex){        SleepCollectionCellCollectionViewCell *cell = (SleepCollectionCellCollectionViewCell*)[collection cellForItemAtIndexPath:path];        if(path != maxPath){            cell.graphArea.backgroundColor = [UIColor clearColor];        }else{            cell.graphArea.backgroundColor = [UIColor colorWithRed:67/255.0 green:222/255.0 blue:224/255.0 alpha:0.2 ];            SleepDayDatum *sleepDatum = [self.mySleepData objectAtIndex:maxPath.row];            self.current = [sleepDatum.day daysAfterDate:EPOCH];            [self changeDate:self.current];            [self buildRecentData];            //            self.dateSelectView.selectedDate = [sleepDatum.day dateBySubtractingDays:1];        }    }}- (void) scrollViewDidScroll:(UIScrollView *)scrollView{    [self updateVisibleCell];}@end